{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","root","display","justifyContent","alignItems","overflow","padding","spacing","paper","color","palette","text","secondary","backgroundColor","picker","width","borderRadius","borderColor","discountInput","textCenter","textAlign","paddingBottom","divider","margin","badge","right","top","fontSize","ColorButton","withStyles","getContrastText","green","Button","now","Date","h","getHours","m","getMinutes","App","classes","useState","value","onChange","travelTimeHours","setTravelTimeHours","travelTimeMinutes","setTravelTimeMinutes","timeOffHours","setTimeOffHours","timeOffMinutes","setTimeOffMinutes","result","setResult","rounded","setRounded","rate","setRate","discount","setDiscount","labourTime","setLabourTime","trav","setTrav","offTime","setOffTime","submit","setSubmit","onlyNumbers","e","target","replace","timeStringToFloat","time","hoursMinutes","split","parseInt","roundTime","minutesToRound","hours","minutes","Math","ceil","rHr","floor","rMin","padStart","formatPrice","number","Intl","NumberFormat","style","currency","format","Container","className","maxWidth","Paper","Grid","container","justify","item","xs","Typography","variant","clockIcon","disableClock","TextField","inputProps","maxLength","inputMode","onInput","label","size","name","disabled","onClick","start","finish","toffh","toffm","ary1","ary2","minsdiff","labour","travel","tOff","String","substr","calculateTime","Divider","direction","Box","Badge","anchorOriginTopRightRectangle","badgeContent","placeholder","marginTop","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f8f58cb4.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport {\n  Container,\n  Grid,\n  Paper,\n  Button,\n  TextField,\n  Typography,\n  withStyles,\n  Divider,\n  Box,\n  Badge,\n} from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { green } from \"@material-ui/core/colors\";\nimport TimeRangePicker from \"@wojtekmaj/react-timerange-picker\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    // height: \"100%\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    overflow: \"hidden\",\n    padding: theme.spacing(4, 2),\n  },\n  paper: {\n    padding: theme.spacing(2),\n    // textAlign: \"center\",\n    color: theme.palette.text.secondary,\n    backgroundColor: \"#fff\",\n  },\n  picker: {\n    width: \"100%\",\n    \"& div\": {\n      borderRadius: 4,\n      padding: 6,\n      borderColor: \"rgba(0, 0, 0, 0.23)\",\n    },\n  },\n  secondary: {\n    color: \"#757575\",\n  },\n  discountInput: {\n    width: \"10%\",\n    \"& > div input\": {\n      padding: \"1px 5px\",\n    },\n  },\n  textCenter: {\n    textAlign: \"center\",\n    paddingBottom: 16,\n  },\n  divider: {\n    margin: theme.spacing(2, 0),\n  },\n  badge: {\n    right: 21,\n    top: -5,\n    fontSize: 8,\n  },\n}));\n\nconst ColorButton = withStyles((theme) => ({\n  root: {\n    color: theme.palette.getContrastText(green[700]),\n    backgroundColor: green[500],\n    \"&:hover\": {\n      backgroundColor: green[700],\n    },\n  },\n}))(Button);\n\nconst now = new Date();\nconst h = now.getHours();\nconst m = now.getMinutes();\n\nconst App = () => {\n  const classes = useStyles();\n  const [value, onChange] = useState([\"8:00\", `${h}:${m}`]);\n  const [travelTimeHours, setTravelTimeHours] = useState(\"0\");\n  const [travelTimeMinutes, setTravelTimeMinutes] = useState(\"0\");\n  const [timeOffHours, setTimeOffHours] = useState(\"0\");\n  const [timeOffMinutes, setTimeOffMinutes] = useState(\"0\");\n  const [result, setResult] = useState();\n  const [rounded, setRounded] = useState();\n  const [rate, setRate] = useState(160);\n  const [discount, setDiscount] = useState(0);\n  const [labourTime, setLabourTime] = useState();\n  const [trav, setTrav] = useState();\n  const [offTime, setOffTime] = useState();\n  const [submit, setSubmit] = useState(false);\n\n  const onlyNumbers = (e) => {\n    e.target.value = e.target.value.replace(/[^0-9]/g, \"\");\n  };\n\n  const resetCalculator = () => {\n    onChange([\"8:00\", `${h}:${m}`]);\n    setTravelTimeHours(\"0\");\n    setTravelTimeMinutes(\"0\");\n    setTimeOffHours(\"0\");\n    setTimeOffMinutes(\"0\");\n    setResult(null);\n    setRounded(null);\n    setLabourTime(null);\n    setTrav(null);\n    setRate(120);\n    setOffTime(null);\n    setSubmit(false);\n  };\n\n  const timeStringToFloat = (time) => {\n    var hoursMinutes = time.split(\":\");\n    var hours = parseInt(hoursMinutes[0], 10);\n    var minutes = hoursMinutes[1] ? parseInt(hoursMinutes[1], 10) : 0;\n    return hours + minutes / 60;\n  };\n\n  const calculateTime = (\n    start,\n    finish,\n    travelTimeHours,\n    travelTimeMinutes,\n    toffh,\n    toffm\n  ) => {\n    let ary1 = start.split(\":\");\n    let ary2 = finish.split(\":\");\n    let minsdiff =\n      parseInt(travelTimeHours, 10) * 60 +\n      parseInt(travelTimeMinutes, 10) +\n      parseInt(ary2[0], 10) * 60 +\n      parseInt(ary2[1], 10) -\n      parseInt(ary1[0], 10) * 60 -\n      parseInt(ary1[1], 10) -\n      parseInt(toffh, 10) * 60 -\n      parseInt(toffm, 10);\n    let labour =\n      parseInt(ary2[0], 10) * 60 +\n      parseInt(ary2[1], 10) -\n      parseInt(ary1[0], 10) * 60 -\n      parseInt(ary1[1], 10);\n    let travel =\n      parseInt(travelTimeHours, 10) * 60 + parseInt(travelTimeMinutes, 10);\n    let tOff = parseInt(toffh, 10) * 60 + parseInt(toffm, 10);\n    setLabourTime(\n      String(100 + Math.floor(labour / 60)).substr(1) +\n        \":\" +\n        String(100 + Math.floor(labour % 60)).substr(1)\n    );\n\n    setTrav(\n      String(100 + Math.floor(travel / 60)).substr(1) +\n        \":\" +\n        String(100 + (travel % 60)).substr(1)\n    );\n    setOffTime(\n      String(100 + Math.floor(tOff / 60)).substr(1) +\n        \":\" +\n        String(100 + (tOff % 60)).substr(1)\n    );\n\n    roundTime(\n      String(100 + Math.floor(minsdiff / 60)).substr(1) +\n        \":\" +\n        String(100 + (minsdiff % 60)).substr(1),\n      15\n    );\n\n    setResult(\n      String(100 + Math.floor(minsdiff / 60)).substr(1) +\n        \":\" +\n        String(100 + (minsdiff % 60)).substr(1)\n    );\n  };\n\n  const roundTime = (time, minutesToRound) => {\n    let [hours, minutes] = time.split(\":\");\n    hours = parseInt(hours);\n    minutes = parseInt(minutes);\n\n    // Convert hours and minutes to time in minutes\n    time = hours * 60 + minutes;\n\n    let rounded = Math.ceil(time / minutesToRound) * minutesToRound;\n    let rHr = \"\" + Math.floor(rounded / 60);\n    let rMin = \"\" + (rounded % 60);\n\n    setRounded(rHr.padStart(2, \"0\") + \":\" + rMin.padStart(2, \"0\"));\n  };\n\n  const formatPrice = (number) => {\n    return new Intl.NumberFormat(\"en-US\", {\n      style: \"currency\",\n      currency: \"USD\",\n    }).format(number);\n  };\n\n  let color = \"black\";\n  if (travelTimeHours === \"0\" && travelTimeMinutes === \"0\") {\n    color = \"red\";\n  } else {\n    color = \"black\";\n  }\n\n  return (\n    <Container className={classes.root} maxWidth=\"sm\">\n      <Paper className={classes.paper}>\n        <Grid\n          container\n          spacing={2}\n          justify=\"center\"\n          alignItems=\"center\"\n          className={classes.textCenter}\n        >\n          <Grid item xs={12}>\n            <Typography variant=\"h5\" color=\"textPrimary\">\n              Time Duration Calculator\n            </Typography>\n          </Grid>\n          <Grid item xs={12}>\n            <TimeRangePicker\n              className={classes.picker}\n              onChange={onChange}\n              value={value}\n              clockIcon={null}\n              disableClock\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <Typography\n              style={{\n                color: `${color}`,\n              }}\n            >\n              Travel time\n            </Typography>\n          </Grid>\n          <Grid item xs={3}>\n            <TextField\n              value={travelTimeHours}\n              inputProps={{\n                maxLength: 2,\n                inputMode: \"numeric\",\n              }}\n              onInput={(e) => onlyNumbers(e)}\n              label=\"hr\"\n              variant=\"outlined\"\n              size=\"small\"\n              name=\"travelTimeHours\"\n              onChange={(e) => setTravelTimeHours(e.target.value)}\n            />\n          </Grid>\n          <Grid item xs={1}>\n            <Typography>:</Typography>\n          </Grid>\n          <Grid item xs={3}>\n            <TextField\n              value={travelTimeMinutes}\n              inputProps={{\n                maxLength: 2,\n                inputMode: \"numeric\",\n              }}\n              onInput={(e) => onlyNumbers(e)}\n              label=\"min\"\n              variant=\"outlined\"\n              size=\"small\"\n              name=\"travelTimeMinutes\"\n              onChange={(e) => setTravelTimeMinutes(e.target.value)}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <Typography color=\"textPrimary\">Time off</Typography>\n          </Grid>\n          <Grid item xs={3}>\n            <TextField\n              value={timeOffHours}\n              inputProps={{\n                maxLength: 2,\n                inputMode: \"numeric\",\n              }}\n              onInput={(e) => onlyNumbers(e)}\n              label=\"hr\"\n              variant=\"outlined\"\n              size=\"small\"\n              name=\"timeOffHours\"\n              onChange={(e) => setTimeOffHours(e.target.value)}\n            />\n          </Grid>\n          <Grid item xs={1}>\n            <Typography>:</Typography>\n          </Grid>\n          <Grid item xs={3}>\n            <TextField\n              value={timeOffMinutes}\n              inputProps={{\n                maxLength: 2,\n                inputMode: \"numeric\",\n              }}\n              onInput={(e) => onlyNumbers(e)}\n              label=\"min\"\n              variant=\"outlined\"\n              size=\"small\"\n              name=\"timeOffMinutes\"\n              onChange={(e) => setTimeOffMinutes(e.target.value)}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <ColorButton\n              color=\"primary\"\n              size=\"small\"\n              variant=\"contained\"\n              disabled={\n                !travelTimeHours ||\n                !travelTimeMinutes ||\n                !value ||\n                !timeOffHours ||\n                !timeOffMinutes ||\n                (travelTimeHours === \"0\" && travelTimeMinutes === \"0\")\n                  ? true\n                  : false\n              }\n              onClick={() => {\n                calculateTime(\n                  value[0],\n                  value[1],\n                  travelTimeHours,\n                  travelTimeMinutes,\n                  timeOffHours,\n                  timeOffMinutes\n                );\n                setSubmit(true);\n              }}\n            >\n              Calculate\n            </ColorButton>\n          </Grid>\n        </Grid>\n        {submit && <Divider className={classes.divider} />}\n        {submit && (\n          <Grid\n            container\n            spacing={2}\n            justify=\"center\"\n            alignItems=\"center\"\n            direction=\"row\"\n          >\n            {labourTime && (\n              <>\n                <Grid item xs={6}>\n                  <Typography color=\"textPrimary\">Labour Time:</Typography>\n                </Grid>\n                <Grid item xs={6}>\n                  <Typography color=\"textSecondary\">{labourTime}</Typography>\n                </Grid>\n              </>\n            )}\n\n            {trav && (\n              <>\n                <Grid item xs={6}>\n                  <Typography color=\"textPrimary\">Travel Time:</Typography>\n                </Grid>\n                <Grid item xs={6}>\n                  <Typography color=\"textSecondary\">{trav}</Typography>\n                </Grid>\n              </>\n            )}\n\n            {offTime && (\n              <>\n                <Grid item xs={6}>\n                  <Typography color=\"textPrimary\">Time off: </Typography>\n                </Grid>\n                <Grid item xs={6}>\n                  <Typography color=\"textSecondary\">{offTime}</Typography>\n                </Grid>\n              </>\n            )}\n            {result && (\n              <>\n                <Grid item xs={3}>\n                  <Typography color=\"textPrimary\">Total:</Typography>\n                </Grid>\n                <Grid item xs={9}>\n                  <Box display=\"flex\">\n                    <Badge\n                      classes={{ anchorOriginTopRightRectangle: classes.badge }}\n                      color=\"default\"\n                      badgeContent={<p>labour</p>}\n                    >\n                      <Typography>{labourTime}</Typography>\n                    </Badge>\n                    <span style={{ margin: \"0px 3px\" }}>+</span>\n                    <Badge\n                      classes={{ anchorOriginTopRightRectangle: classes.badge }}\n                      color=\"default\"\n                      badgeContent={<p>travel</p>}\n                    >\n                      <Typography>{trav}</Typography>\n                    </Badge>\n                    {offTime !== \"00:00\" ? (\n                      <Badge\n                        classes={{\n                          anchorOriginTopRightRectangle: classes.badge,\n                        }}\n                        color=\"default\"\n                        badgeContent={<p>off</p>}\n                      >\n                        <Typography>\n                          <span style={{ margin: \"0px 3px\" }}>-</span>\n                          {offTime}\n                        </Typography>\n                      </Badge>\n                    ) : null}\n\n                    <Typography>\n                      <span style={{ margin: \"0px 3px\" }}>=</span>\n                      {result}\n                    </Typography>\n                  </Box>\n                </Grid>\n              </>\n            )}\n            {result && (\n              <>\n                <Grid item xs={6}>\n                  <Typography style={{ color: green[500] }}>\n                    Time rounded:\n                  </Typography>\n                </Grid>\n                <Grid item xs={6}>\n                  <Typography>{rounded}</Typography>\n                </Grid>\n              </>\n            )}\n          </Grid>\n        )}\n        {rounded && <Divider className={classes.divider} />}\n        {rounded && (\n          <Grid\n            container\n            spacing={3}\n            justify=\"center\"\n            alignItems=\"center\"\n            className={classes.textCenter}\n          >\n            <Grid item xs={12}>\n              <Typography color=\"textPrimary\">Total Amount</Typography>\n            </Grid>\n            <Grid item xs={2}>\n              <Typography color=\"textSecondary\">\n                {timeStringToFloat(rounded)}\n              </Typography>\n            </Grid>\n            <Grid item xs={1}>\n              <Typography color=\"textSecondary\">*</Typography>\n            </Grid>\n            <Grid item xs={3}>\n              <TextField\n                value={rate}\n                inputProps={{\n                  maxLength: 3,\n                  inputMode: \"numeric\",\n                }}\n                onInput={(e) => onlyNumbers(e)}\n                label=\"rate\"\n                placeholder=\"160\"\n                variant=\"outlined\"\n                size=\"small\"\n                name=\"rate\"\n                onChange={(e) => setRate(e.target.value)}\n              />\n            </Grid>\n            <Grid item xs={1}>\n              <Typography color=\"textSecondary\">=</Typography>\n            </Grid>\n            <Grid item xs={4}>\n              <Typography color=\"textSecondary\">\n                {formatPrice(timeStringToFloat(rounded) * rate)}\n              </Typography>\n            </Grid>\n            <Grid item xs={12}>\n              <Divider />\n            </Grid>\n            <Grid item xs={12}>\n              <Typography color=\"textPrimary\">Extra</Typography>\n            </Grid>\n            <Grid item xs={12}>\n              <Typography\n                color=\"textPrimary\"\n                variant=\"h6\"\n                style={{ fontSize: 14 }}\n              >\n                {formatPrice(timeStringToFloat(rounded) * rate)} -{\" \"}\n                <TextField\n                  className={classes.discountInput}\n                  value={discount}\n                  inputProps={{\n                    maxLength: 2,\n                    inputMode: \"numeric\",\n                  }}\n                  onInput={(e) => onlyNumbers(e)}\n                  placeholder=\"0\"\n                  variant=\"outlined\"\n                  size=\"small\"\n                  name=\"discount\"\n                  onChange={(e) => setDiscount(e.target.value)}\n                />{\" \"}\n                % (\n                <span className={classes.secondary}>\n                  {formatPrice(\n                    timeStringToFloat(rounded) * rate * (discount * 0.01)\n                  )}\n                </span>\n                ) ={\" \"}\n                <span className=\"error\">\n                  {\" \"}\n                  {formatPrice(\n                    timeStringToFloat(rounded) * rate -\n                      timeStringToFloat(rounded) * rate * (discount * 0.01)\n                  )}\n                </span>\n              </Typography>\n            </Grid>\n          </Grid>\n        )}\n        {result && (\n          <Grid item xs={12} style={{ marginTop: \"2rem\" }}>\n            <Button\n              color=\"secondary\"\n              size=\"small\"\n              variant=\"outlined\"\n              onClick={() => resetCalculator()}\n            >\n              Reset\n            </Button>\n          </Grid>\n        )}\n      </Paper>\n    </Container>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}