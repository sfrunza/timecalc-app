{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","root","height","display","justifyContent","alignItems","overflow","paper","padding","spacing","textAlign","color","palette","text","secondary","picker","width","borderRadius","borderColor","ColorButton","withStyles","getContrastText","green","backgroundColor","Button","now","Date","h","getHours","m","getMinutes","App","number","classes","useState","value","onChange","travelTimeHours","setTravelTimeHours","travelTimeMinutes","setTravelTimeMinutes","result","setResult","rounded","setRounded","rate","setRate","labourTime","setLabourTime","trav","setTrav","onlyNumbers","e","target","replace","timeStringToFloat","time","hoursMinutes","split","parseInt","roundTime","minutesToRound","hours","minutes","Math","ceil","rHr","floor","rMin","padStart","console","log","Container","fixed","className","Paper","Grid","container","justify","item","xs","Typography","variant","clockIcon","disableClock","TextField","inputProps","maxLength","inputMode","onInput","label","placeholder","size","name","disabled","onClick","start","finish","ary1","ary2","minsdiff","labour","travel","String","substr","calculateTime","style","Intl","NumberFormat","currency","format","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.47ee940e.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport {\n  Container,\n  Grid,\n  Paper,\n  Button,\n  TextField,\n  Typography,\n  withStyles,\n} from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { green } from \"@material-ui/core/colors\";\nimport TimeRangePicker from \"@wojtekmaj/react-timerange-picker\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    height: \"90vh\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    overflow: \"hidden\",\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: \"center\",\n    color: theme.palette.text.secondary,\n  },\n  picker: {\n    width: \"100%\",\n    \"& div\": {\n      borderRadius: 4,\n      padding: 6,\n      borderColor: \"rgba(0, 0, 0, 0.23)\",\n    },\n  },\n}));\n\nconst ColorButton = withStyles((theme) => ({\n  root: {\n    color: theme.palette.getContrastText(green[700]),\n    backgroundColor: green[500],\n    \"&:hover\": {\n      backgroundColor: green[700],\n    },\n  },\n}))(Button);\n\nconst now = new Date();\nconst h = now.getHours();\nconst m = now.getMinutes();\n\nconst App = () => {\n  const classes = useStyles();\n  const [value, onChange] = useState([\"8:00\", `${h}:${m}`]);\n  const [travelTimeHours, setTravelTimeHours] = useState(\"0\");\n  const [travelTimeMinutes, setTravelTimeMinutes] = useState(\"0\");\n  const [result, setResult] = useState();\n  const [rounded, setRounded] = useState();\n  const [rate, setRate] = useState(120);\n  const [labourTime, setLabourTime] = useState();\n  const [trav, setTrav] = useState();\n\n  const onlyNumbers = (e) => {\n    e.target.value = e.target.value.replace(/[^0-9]/g, \"\");\n  };\n\n  const resetCalculator = () => {\n    onChange([\"8:00\", `${h}:${m}`]);\n    setTravelTimeHours(\"0\");\n    setTravelTimeMinutes(\"0\");\n    setResult(null);\n    setRounded(null);\n    setRate(120);\n  };\n\n  const timeStringToFloat = (time) => {\n    var hoursMinutes = time.split(\":\");\n    var hours = parseInt(hoursMinutes[0], 10);\n    var minutes = hoursMinutes[1] ? parseInt(hoursMinutes[1], 10) : 0;\n    return hours + minutes / 60;\n  };\n\n  const calculateTime = (start, finish, travelTimeHours, travelTimeMinutes) => {\n    let ary1 = start.split(\":\");\n    let ary2 = finish.split(\":\");\n    // let ary3 = travel.split(\":\");\n    let minsdiff =\n      parseInt(travelTimeHours, 10) * 60 +\n      parseInt(travelTimeMinutes, 10) +\n      parseInt(ary2[0], 10) * 60 +\n      parseInt(ary2[1], 10) -\n      parseInt(ary1[0], 10) * 60 -\n      parseInt(ary1[1], 10);\n    let labour =\n      parseInt(ary2[0], 10) * 60 +\n      parseInt(ary2[1], 10) -\n      parseInt(ary1[0], 10) * 60 -\n      parseInt(ary1[1], 10);\n    let travel =\n      parseInt(travelTimeHours, 10) * 60 + parseInt(travelTimeMinutes, 10);\n    setLabourTime(\n      String(100 + Math.floor(labour / 60)).substr(1) +\n        \":\" +\n        String(100 + (labour % 60)).substr(1)\n    );\n    setTrav(\n      String(100 + Math.floor(travel / 60)).substr(1) +\n        \":\" +\n        String(100 + (travel % 60)).substr(1)\n    );\n    roundTime(\n      String(100 + Math.floor(minsdiff / 60)).substr(1) +\n        \":\" +\n        String(100 + (minsdiff % 60)).substr(1),\n      15\n    );\n\n    setResult(\n      String(100 + Math.floor(minsdiff / 60)).substr(1) +\n        \":\" +\n        String(100 + (minsdiff % 60)).substr(1)\n    );\n  };\n\n  const roundTime = (time, minutesToRound) => {\n    let [hours, minutes] = time.split(\":\");\n    hours = parseInt(hours);\n    minutes = parseInt(minutes);\n\n    // Convert hours and minutes to time in minutes\n    time = hours * 60 + minutes;\n\n    let rounded = Math.ceil(time / minutesToRound) * minutesToRound;\n    let rHr = \"\" + Math.floor(rounded / 60);\n    let rMin = \"\" + (rounded % 60);\n\n    setRounded(rHr.padStart(2, \"0\") + \":\" + rMin.padStart(2, \"0\"));\n  };\n\n  const formatPrice = (number) => {\n    return new Intl.NumberFormat(\"en-US\", {\n      style: \"currency\",\n      currency: \"USD\",\n    }).format(number);\n  };\n\n  console.log(value);\n\n  return (\n    <Container fixed className={classes.root}>\n      <Paper className={classes.paper}>\n        <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\n          <Grid item xs={12}>\n            <Typography variant=\"h5\" color=\"textPrimary\">\n              Time Duration Calculator\n            </Typography>\n          </Grid>\n          <Grid item xs={12}>\n            <TimeRangePicker\n              className={classes.picker}\n              onChange={onChange}\n              value={value}\n              clockIcon={null}\n              disableClock\n            />\n          </Grid>\n          <Grid item xs={2}>\n            <Typography color=\"textPrimary\">Rate: </Typography>\n          </Grid>\n          <Grid item xs={3}>\n            <TextField\n              value={rate}\n              inputProps={{\n                maxLength: 3,\n                inputMode: \"numeric\",\n              }}\n              onInput={(e) => onlyNumbers(e)}\n              label=\"\"\n              placeholder=\"160\"\n              variant=\"outlined\"\n              size=\"small\"\n              name=\"rate\"\n              onChange={(e) => setRate(e.target.value)}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <Typography color=\"textPrimary\">Travel time</Typography>\n          </Grid>\n          <Grid item xs={3}>\n            <TextField\n              value={travelTimeHours}\n              inputProps={{\n                maxLength: 2,\n                inputMode: \"numeric\",\n              }}\n              onInput={(e) => onlyNumbers(e)}\n              label=\"hr\"\n              variant=\"outlined\"\n              size=\"small\"\n              name=\"travelTimeHours\"\n              onChange={(e) => setTravelTimeHours(e.target.value)}\n            />\n          </Grid>\n          <Grid item xs={1}>\n            <Typography>:</Typography>\n          </Grid>\n          <Grid item xs={3}>\n            <TextField\n              value={travelTimeMinutes}\n              inputProps={{\n                maxLength: 2,\n                inputMode: \"numeric\",\n              }}\n              onInput={(e) => onlyNumbers(e)}\n              label=\"min\"\n              variant=\"outlined\"\n              size=\"small\"\n              name=\"travelTimeMinutes\"\n              onChange={(e) => setTravelTimeMinutes(e.target.value)}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <ColorButton\n              color=\"primary\"\n              size=\"small\"\n              variant=\"contained\"\n              disabled={\n                !travelTimeHours || !travelTimeMinutes || !value ? true : false\n              }\n              onClick={() => {\n                calculateTime(\n                  value[0],\n                  value[1],\n                  travelTimeHours,\n                  travelTimeMinutes\n                );\n              }}\n            >\n              Calculate\n            </ColorButton>\n          </Grid>\n          <Grid item xs={12}>\n            <Typography color=\"textPrimary\">\n              Labour Time: {labourTime}\n            </Typography>\n          </Grid>\n          <Grid item xs={12}>\n            <Typography color=\"textPrimary\">Travel Time: {trav}</Typography>\n          </Grid>\n          {result && (\n            <Grid item xs={5}>\n              <Typography color=\"textPrimary\">Total time</Typography>\n              <Typography>{result}</Typography>\n            </Grid>\n          )}\n          {result && (\n            <Grid item xs={5}>\n              <Typography style={{ color: green[500] }}>\n                Total rounded\n              </Typography>\n              <Typography>{rounded}</Typography>\n            </Grid>\n          )}\n          {rounded && (\n            <Grid item xs={12}>\n              <Typography color=\"textPrimary\">Total Amount</Typography>\n              <Typography>\n                {timeStringToFloat(rounded)} * {rate} ={\" \"}\n                {formatPrice(timeStringToFloat(rounded) * rate)}\n              </Typography>\n            </Grid>\n          )}\n          {result && (\n            <Grid item xs={12}>\n              <Button\n                color=\"secondary\"\n                size=\"small\"\n                variant=\"contained\"\n                onClick={() => resetCalculator()}\n              >\n                Reset\n              </Button>\n            </Grid>\n          )}\n        </Grid>\n      </Paper>\n    </Container>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}