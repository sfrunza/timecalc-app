{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","root","display","justifyContent","alignItems","overflow","padding","spacing","paper","textAlign","color","palette","text","secondary","backgroundColor","picker","width","borderRadius","borderColor","discountInput","height","ColorButton","withStyles","getContrastText","green","Button","now","Date","h","getHours","m","getMinutes","App","classes","useState","value","onChange","travelTimeHours","setTravelTimeHours","travelTimeMinutes","setTravelTimeMinutes","timeOffHours","setTimeOffHours","timeOffMinutes","setTimeOffMinutes","result","setResult","rounded","setRounded","rate","setRate","discount","setDiscount","labourTime","setLabourTime","trav","setTrav","offTime","setOffTime","onlyNumbers","e","target","replace","timeStringToFloat","time","hoursMinutes","split","parseInt","roundTime","minutesToRound","hours","minutes","Math","ceil","rHr","floor","rMin","padStart","formatPrice","number","Intl","NumberFormat","style","currency","format","Container","className","maxWidth","Paper","Grid","container","justify","item","xs","Typography","variant","clockIcon","disableClock","TextField","inputProps","maxLength","inputMode","onInput","label","size","name","disabled","onClick","start","finish","toffh","toffm","ary1","ary2","minsdiff","labour","travel","tOff","String","substr","calculateTime","Box","visibility","Divider","placeholder","marginBottom","marginTop","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7ec0a82f.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport {\n  Container,\n  Grid,\n  Paper,\n  Button,\n  TextField,\n  Typography,\n  withStyles,\n  Divider,\n  Box,\n} from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { green } from \"@material-ui/core/colors\";\nimport TimeRangePicker from \"@wojtekmaj/react-timerange-picker\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    // height: \"100%\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    overflow: \"hidden\",\n    padding: theme.spacing(4, 2),\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: \"center\",\n    color: theme.palette.text.secondary,\n    backgroundColor: \"#fff\",\n  },\n  picker: {\n    width: \"100%\",\n    \"& div\": {\n      borderRadius: 4,\n      padding: 6,\n      borderColor: \"rgba(0, 0, 0, 0.23)\",\n    },\n  },\n  secondary: {\n    color: \"#757575\",\n  },\n  discountInput: {\n    width: \"10%\",\n    \"& > div input\": {\n      height: 10,\n      padding: \"7px 5px\",\n    },\n  },\n}));\n\nconst ColorButton = withStyles((theme) => ({\n  root: {\n    color: theme.palette.getContrastText(green[700]),\n    backgroundColor: green[500],\n    \"&:hover\": {\n      backgroundColor: green[700],\n    },\n  },\n}))(Button);\n\nconst now = new Date();\nconst h = now.getHours();\nconst m = now.getMinutes();\n\nconst App = () => {\n  const classes = useStyles();\n  const [value, onChange] = useState([\"8:00\", `${h}:${m}`]);\n  const [travelTimeHours, setTravelTimeHours] = useState(\"0\");\n  const [travelTimeMinutes, setTravelTimeMinutes] = useState(\"0\");\n  const [timeOffHours, setTimeOffHours] = useState(\"0\");\n  const [timeOffMinutes, setTimeOffMinutes] = useState(\"0\");\n  const [result, setResult] = useState();\n  const [rounded, setRounded] = useState();\n  const [rate, setRate] = useState(160);\n  const [discount, setDiscount] = useState(0);\n  const [labourTime, setLabourTime] = useState();\n  const [trav, setTrav] = useState();\n  const [offTime, setOffTime] = useState();\n\n  const onlyNumbers = (e) => {\n    e.target.value = e.target.value.replace(/[^0-9]/g, \"\");\n  };\n\n  const resetCalculator = () => {\n    onChange([\"8:00\", `${h}:${m}`]);\n    setTravelTimeHours(\"0\");\n    setTravelTimeMinutes(\"0\");\n    setTimeOffHours(\"0\");\n    setTimeOffMinutes(\"0\");\n    setResult(null);\n    setRounded(null);\n    setLabourTime(null);\n    setTrav(null);\n    setRate(120);\n    setOffTime(null);\n  };\n\n  const timeStringToFloat = (time) => {\n    var hoursMinutes = time.split(\":\");\n    var hours = parseInt(hoursMinutes[0], 10);\n    var minutes = hoursMinutes[1] ? parseInt(hoursMinutes[1], 10) : 0;\n    return hours + minutes / 60;\n  };\n\n  const calculateTime = (\n    start,\n    finish,\n    travelTimeHours,\n    travelTimeMinutes,\n    toffh,\n    toffm\n  ) => {\n    let ary1 = start.split(\":\");\n    let ary2 = finish.split(\":\");\n    let minsdiff =\n      parseInt(travelTimeHours, 10) * 60 +\n      parseInt(travelTimeMinutes, 10) +\n      parseInt(ary2[0], 10) * 60 +\n      parseInt(ary2[1], 10) -\n      parseInt(ary1[0], 10) * 60 -\n      parseInt(ary1[1], 10) -\n      parseInt(toffh, 10) * 60 -\n      parseInt(toffm, 10);\n    let labour =\n      parseInt(ary2[0], 10) * 60 +\n      parseInt(ary2[1], 10) -\n      parseInt(ary1[0], 10) * 60 -\n      parseInt(ary1[1], 10);\n    let travel =\n      parseInt(travelTimeHours, 10) * 60 + parseInt(travelTimeMinutes, 10);\n    let tOff = parseInt(toffh, 10) * 60 + parseInt(toffm, 10);\n    setLabourTime(\n      String(100 + Math.floor(labour / 60)).substr(1) +\n        \":\" +\n        String(100 + Math.floor(labour % 60)).substr(1)\n    );\n\n    setTrav(\n      String(100 + Math.floor(travel / 60)).substr(1) +\n        \":\" +\n        String(100 + (travel % 60)).substr(1)\n    );\n    setOffTime(\n      String(100 + Math.floor(tOff / 60)).substr(1) +\n        \":\" +\n        String(100 + (tOff % 60)).substr(1)\n    );\n\n    roundTime(\n      String(100 + Math.floor(minsdiff / 60)).substr(1) +\n        \":\" +\n        String(100 + (minsdiff % 60)).substr(1),\n      15\n    );\n\n    setResult(\n      String(100 + Math.floor(minsdiff / 60)).substr(1) +\n        \":\" +\n        String(100 + (minsdiff % 60)).substr(1)\n    );\n  };\n\n  const roundTime = (time, minutesToRound) => {\n    let [hours, minutes] = time.split(\":\");\n    hours = parseInt(hours);\n    minutes = parseInt(minutes);\n\n    // Convert hours and minutes to time in minutes\n    time = hours * 60 + minutes;\n\n    let rounded = Math.ceil(time / minutesToRound) * minutesToRound;\n    let rHr = \"\" + Math.floor(rounded / 60);\n    let rMin = \"\" + (rounded % 60);\n\n    setRounded(rHr.padStart(2, \"0\") + \":\" + rMin.padStart(2, \"0\"));\n  };\n\n  const formatPrice = (number) => {\n    return new Intl.NumberFormat(\"en-US\", {\n      style: \"currency\",\n      currency: \"USD\",\n    }).format(number);\n  };\n\n  return (\n    <Container className={classes.root} maxWidth=\"sm\">\n      <Paper className={classes.paper}>\n        <Grid container spacing={2} justify=\"center\" alignItems=\"center\">\n          <Grid item xs={12}>\n            <Typography variant=\"h5\" color=\"textPrimary\">\n              Time Duration Calculator.\n            </Typography>\n          </Grid>\n          <Grid item xs={12}>\n            <TimeRangePicker\n              className={classes.picker}\n              onChange={onChange}\n              value={value}\n              clockIcon={null}\n              disableClock\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <Typography color=\"textPrimary\">Travel time</Typography>\n          </Grid>\n          <Grid item xs={3}>\n            <TextField\n              value={travelTimeHours}\n              inputProps={{\n                maxLength: 2,\n                inputMode: \"numeric\",\n              }}\n              onInput={(e) => onlyNumbers(e)}\n              label=\"hr\"\n              variant=\"outlined\"\n              size=\"small\"\n              name=\"travelTimeHours\"\n              onChange={(e) => setTravelTimeHours(e.target.value)}\n            />\n          </Grid>\n          <Grid item xs={1}>\n            <Typography>:</Typography>\n          </Grid>\n          <Grid item xs={3}>\n            <TextField\n              value={travelTimeMinutes}\n              inputProps={{\n                maxLength: 2,\n                inputMode: \"numeric\",\n              }}\n              onInput={(e) => onlyNumbers(e)}\n              label=\"min\"\n              variant=\"outlined\"\n              size=\"small\"\n              name=\"travelTimeMinutes\"\n              onChange={(e) => setTravelTimeMinutes(e.target.value)}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <Typography color=\"textPrimary\">Time off</Typography>\n          </Grid>\n          <Grid item xs={3}>\n            <TextField\n              value={timeOffHours}\n              inputProps={{\n                maxLength: 2,\n                inputMode: \"numeric\",\n              }}\n              onInput={(e) => onlyNumbers(e)}\n              label=\"hr\"\n              variant=\"outlined\"\n              size=\"small\"\n              name=\"timeOffHours\"\n              onChange={(e) => setTimeOffHours(e.target.value)}\n            />\n          </Grid>\n          <Grid item xs={1}>\n            <Typography>:</Typography>\n          </Grid>\n          <Grid item xs={3}>\n            <TextField\n              value={timeOffMinutes}\n              inputProps={{\n                maxLength: 2,\n                inputMode: \"numeric\",\n              }}\n              onInput={(e) => onlyNumbers(e)}\n              label=\"min\"\n              variant=\"outlined\"\n              size=\"small\"\n              name=\"timeOffMinutes\"\n              onChange={(e) => setTimeOffMinutes(e.target.value)}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <ColorButton\n              color=\"primary\"\n              size=\"small\"\n              variant=\"contained\"\n              disabled={\n                !travelTimeHours ||\n                !travelTimeMinutes ||\n                !value ||\n                !timeOffHours ||\n                !timeOffMinutes\n                  ? true\n                  : false\n              }\n              onClick={() => {\n                calculateTime(\n                  value[0],\n                  value[1],\n                  travelTimeHours,\n                  travelTimeMinutes,\n                  timeOffHours,\n                  timeOffMinutes\n                );\n              }}\n            >\n              Calculate\n            </ColorButton>\n          </Grid>\n          {labourTime && (\n            <Grid item xs={12}>\n              <Typography color=\"textPrimary\">\n                Labour Time: {labourTime}\n              </Typography>\n            </Grid>\n          )}\n          {trav && (\n            <Grid item xs={12}>\n              <Typography color=\"textPrimary\">Travel Time: {trav}</Typography>\n            </Grid>\n          )}\n          {offTime && (\n            <Grid item xs={12}>\n              <Typography color=\"textPrimary\">Time off: {offTime}</Typography>\n            </Grid>\n          )}\n          {result && (\n            <Grid item xs={5}>\n              <Typography color=\"textPrimary\">Total time</Typography>\n              <Box>\n                <Typography>\n                  {labourTime} <span>+</span>\n                </Typography>\n                <Typography>\n                  {trav} <span>-</span>\n                </Typography>\n                <Typography>\n                  {offTime}\n                  <span style={{ visibility: \"hidden\" }}>=</span>\n                </Typography>\n                <Divider />\n                <Typography>\n                  {result}\n                  <span style={{ visibility: \"hidden\" }}>h</span>\n                </Typography>\n              </Box>\n            </Grid>\n          )}\n          {result && (\n            <Grid item xs={5}>\n              <Typography style={{ color: green[500] }}>\n                Total rounded\n              </Typography>\n              <Typography>{rounded}</Typography>\n            </Grid>\n          )}\n          {rounded && (\n            <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\n              <Grid item xs={12}>\n                <Typography color=\"textPrimary\">Total Amount</Typography>\n              </Grid>\n              <Grid item xs={2}>\n                <Typography color=\"textPrimary\">\n                  {timeStringToFloat(rounded)}\n                </Typography>\n              </Grid>\n              <Grid item xs={1}>\n                <Typography color=\"textPrimary\">*</Typography>\n              </Grid>\n              <Grid item xs={3}>\n                <TextField\n                  value={rate}\n                  inputProps={{\n                    maxLength: 3,\n                    inputMode: \"numeric\",\n                  }}\n                  onInput={(e) => onlyNumbers(e)}\n                  label=\"rate\"\n                  placeholder=\"160\"\n                  variant=\"outlined\"\n                  size=\"small\"\n                  name=\"rate\"\n                  onChange={(e) => setRate(e.target.value)}\n                />\n              </Grid>\n              <Grid item xs={1}>\n                <Typography color=\"textPrimary\">=</Typography>\n              </Grid>\n              <Grid item xs={4}>\n                <Typography color=\"textPrimary\">\n                  {formatPrice(timeStringToFloat(rounded) * rate)}\n                </Typography>\n              </Grid>\n              <Grid item xs={12} style={{ marginBottom: \"16px\" }}>\n                <Typography color=\"textPrimary\">\n                  {formatPrice(timeStringToFloat(rounded) * rate)} -{\" \"}\n                  <TextField\n                    className={classes.discountInput}\n                    value={discount}\n                    inputProps={{\n                      maxLength: 2,\n                      inputMode: \"numeric\",\n                    }}\n                    onInput={(e) => onlyNumbers(e)}\n                    placeholder=\"0\"\n                    variant=\"outlined\"\n                    size=\"small\"\n                    name=\"discount\"\n                    onChange={(e) => setDiscount(e.target.value)}\n                  />{\" \"}\n                  % (\n                  <span className={classes.secondary}>\n                    {formatPrice(\n                      timeStringToFloat(rounded) * rate * (discount * 0.01)\n                    )}\n                  </span>\n                  ) ={\" \"}\n                  <span className=\"error\">\n                    {\" \"}\n                    {formatPrice(\n                      timeStringToFloat(rounded) * rate -\n                        timeStringToFloat(rounded) * rate * (discount * 0.01)\n                    )}\n                  </span>\n                </Typography>\n              </Grid>\n            </Grid>\n          )}\n          {result && (\n            <Grid item xs={12} style={{ marginTop: \"2rem\" }}>\n              <Button\n                color=\"secondary\"\n                size=\"small\"\n                variant=\"contained\"\n                onClick={() => resetCalculator()}\n              >\n                Reset\n              </Button>\n            </Grid>\n          )}\n        </Grid>\n      </Paper>\n    </Container>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}