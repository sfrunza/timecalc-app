{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","root","minHeight","display","justifyContent","alignItems","overflow","padding","spacing","marginBottom","paper","color","palette","text","secondary","picker","width","borderRadius","borderColor","discountInput","textCenter","textAlign","paddingBottom","divider","margin","badge","right","top","fontSize","ColorButton","withStyles","getContrastText","green","backgroundColor","Button","now","Date","h","getHours","m","getMinutes","App","classes","useState","value","onChange","travelTimeHours","setTravelTimeHours","travelTimeMinutes","setTravelTimeMinutes","timeOffHours","setTimeOffHours","timeOffMinutes","setTimeOffMinutes","result","setResult","rounded","setRounded","rate","setRate","discount","setDiscount","labourTime","setLabourTime","trav","setTrav","offTime","setOffTime","submit","setSubmit","onlyNumbers","e","target","replace","timeStringToFloat","time","hoursMinutes","split","parseInt","roundTime","minutesToRound","hours","minutes","Math","ceil","rHr","floor","rMin","padStart","formatPrice","number","Intl","NumberFormat","style","currency","format","Container","className","maxWidth","Paper","elevation","Box","mb","Typography","variant","Grid","container","justify","item","xs","clockIcon","disableClock","disabled","TextField","inputProps","maxLength","inputMode","onInput","label","size","name","position","bottom","onClick","start","finish","toffh","toffm","ary1","ary2","minsdiff","labour","travel","tOff","String","substr","calculateTime","Divider","direction","Badge","anchorOriginTopRightRectangle","badgeContent","InputProps","endAdornment","InputAdornment","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9dcab6e0.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport {\n  Container,\n  Grid,\n  Paper,\n  Button,\n  TextField,\n  Typography,\n  withStyles,\n  Divider,\n  Box,\n  Badge,\n  InputAdornment,\n} from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { green } from \"@material-ui/core/colors\";\nimport TimeRangePicker from \"@wojtekmaj/react-timerange-picker\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    minHeight: \"80vh\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    overflow: \"hidden\",\n    padding: theme.spacing(4, 2),\n    marginBottom: \"30%\",\n  },\n  paper: {\n    padding: theme.spacing(2),\n    // paddingBottom: theme.spacing(14),\n    // textAlign: \"center\",\n    color: theme.palette.text.secondary,\n    // backgroundColor: \"#fafafa\",\n  },\n  picker: {\n    width: \"100%\",\n    \"& div\": {\n      borderRadius: 8,\n      padding: 6,\n      borderColor: \"rgb(213 213 213)\",\n    },\n  },\n  secondary: {\n    color: \"#757575\",\n  },\n  discountInput: {\n    width: \"18%\",\n    \"& > div input\": {\n      padding: \"6px 0px\",\n    },\n  },\n  textCenter: {\n    textAlign: \"center\",\n    paddingBottom: 16,\n  },\n  divider: {\n    margin: theme.spacing(2, 0),\n  },\n  badge: {\n    right: 21,\n    top: -5,\n    fontSize: 8,\n  },\n}));\n\nconst ColorButton = withStyles((theme) => ({\n  root: {\n    color: theme.palette.getContrastText(green[700]),\n    backgroundColor: green[500],\n    \"&:hover\": {\n      backgroundColor: green[700],\n    },\n  },\n}))(Button);\n\nconst now = new Date();\nconst h = now.getHours();\nconst m = now.getMinutes();\n\nconst App = () => {\n  const classes = useStyles();\n  const [value, onChange] = useState([\"8:00\", `${h}:${m}`]);\n  const [travelTimeHours, setTravelTimeHours] = useState(\"0\");\n  const [travelTimeMinutes, setTravelTimeMinutes] = useState(\"45\");\n  const [timeOffHours, setTimeOffHours] = useState(\"0\");\n  const [timeOffMinutes, setTimeOffMinutes] = useState(\"0\");\n  const [result, setResult] = useState();\n  const [rounded, setRounded] = useState();\n  const [rate, setRate] = useState(160);\n  const [discount, setDiscount] = useState(5);\n  const [labourTime, setLabourTime] = useState();\n  const [trav, setTrav] = useState();\n  const [offTime, setOffTime] = useState();\n  const [submit, setSubmit] = useState(false);\n\n  const onlyNumbers = (e) => {\n    e.target.value = e.target.value.replace(/[^0-9]/g, \"\");\n  };\n\n  const resetCalculator = () => {\n    onChange([\"8:00\", `${h}:${m}`]);\n    setTravelTimeHours(\"0\");\n    setTravelTimeMinutes(\"45\");\n    setTimeOffHours(\"0\");\n    setTimeOffMinutes(\"0\");\n    setResult(null);\n    setRounded(null);\n    setLabourTime(null);\n    setTrav(null);\n    setRate(rate);\n    setOffTime(null);\n    setSubmit(false);\n  };\n\n  const timeStringToFloat = (time) => {\n    var hoursMinutes = time.split(\":\");\n    var hours = parseInt(hoursMinutes[0], 10);\n    var minutes = hoursMinutes[1] ? parseInt(hoursMinutes[1], 10) : 0;\n    return hours + minutes / 60;\n  };\n\n  const calculateTime = (\n    start,\n    finish,\n    travelTimeHours,\n    travelTimeMinutes,\n    toffh,\n    toffm\n  ) => {\n    let ary1 = start.split(\":\");\n    let ary2 = finish.split(\":\");\n    let minsdiff =\n      parseInt(travelTimeHours, 10) * 60 +\n      parseInt(travelTimeMinutes, 10) +\n      parseInt(ary2[0], 10) * 60 +\n      parseInt(ary2[1], 10) -\n      parseInt(ary1[0], 10) * 60 -\n      parseInt(ary1[1], 10) -\n      parseInt(toffh, 10) * 60 -\n      parseInt(toffm, 10);\n    let labour =\n      parseInt(ary2[0], 10) * 60 +\n      parseInt(ary2[1], 10) -\n      parseInt(ary1[0], 10) * 60 -\n      parseInt(ary1[1], 10);\n    let travel =\n      parseInt(travelTimeHours, 10) * 60 + parseInt(travelTimeMinutes, 10);\n    let tOff = parseInt(toffh, 10) * 60 + parseInt(toffm, 10);\n    setLabourTime(\n      String(100 + Math.floor(labour / 60)).substr(1) +\n        \":\" +\n        String(100 + Math.floor(labour % 60)).substr(1)\n    );\n\n    setTrav(\n      String(100 + Math.floor(travel / 60)).substr(1) +\n        \":\" +\n        String(100 + (travel % 60)).substr(1)\n    );\n    setOffTime(\n      String(100 + Math.floor(tOff / 60)).substr(1) +\n        \":\" +\n        String(100 + (tOff % 60)).substr(1)\n    );\n\n    roundTime(\n      String(100 + Math.floor(minsdiff / 60)).substr(1) +\n        \":\" +\n        String(100 + (minsdiff % 60)).substr(1),\n      15\n    );\n\n    setResult(\n      String(100 + Math.floor(minsdiff / 60)).substr(1) +\n        \":\" +\n        String(100 + (minsdiff % 60)).substr(1)\n    );\n  };\n\n  const roundTime = (time, minutesToRound) => {\n    let [hours, minutes] = time.split(\":\");\n    hours = parseInt(hours);\n    minutes = parseInt(minutes);\n\n    // Convert hours and minutes to time in minutes\n    time = hours * 60 + minutes;\n\n    let rounded = Math.ceil(time / minutesToRound) * minutesToRound;\n    let rHr = \"\" + Math.floor(rounded / 60);\n    let rMin = \"\" + (rounded % 60);\n\n    setRounded(rHr.padStart(2, \"0\") + \":\" + rMin.padStart(2, \"0\"));\n  };\n\n  const formatPrice = (number) => {\n    return new Intl.NumberFormat(\"en-US\", {\n      style: \"currency\",\n      currency: \"USD\",\n    }).format(number);\n  };\n\n  let color = \"black\";\n  if (travelTimeHours === \"0\" && travelTimeMinutes === \"0\") {\n    color = \"red\";\n  } else {\n    color = \"black\";\n  }\n\n  return (\n    <Container className={classes.root} maxWidth=\"sm\">\n      <Paper className={classes.paper} elevation={5}>\n        <Box mb={4} display=\"flex\" justifyContent=\"center\">\n          <Typography variant=\"h5\" color=\"textPrimary\">\n            Time Duration Calculator\n          </Typography>\n        </Box>\n        <Grid\n          container\n          spacing={2}\n          justify=\"center\"\n          alignItems=\"center\"\n          className={classes.textCenter}\n        >\n          <Grid item xs={12}>\n            <TimeRangePicker\n              className={classes.picker}\n              onChange={onChange}\n              value={value}\n              clockIcon={null}\n              disableClock\n              disabled={submit}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <Typography\n              style={{\n                color: `${color}`,\n              }}\n            >\n              Travel time\n            </Typography>\n          </Grid>\n          <Grid item xs={3}>\n            <TextField\n              value={travelTimeHours}\n              inputProps={{\n                maxLength: 2,\n                inputMode: \"numeric\",\n              }}\n              onInput={(e) => onlyNumbers(e)}\n              label=\"hr\"\n              variant=\"outlined\"\n              size=\"small\"\n              name=\"travelTimeHours\"\n              onChange={(e) => {\n                setSubmit(false);\n                setTravelTimeHours(e.target.value);\n              }}\n            />\n          </Grid>\n          <Grid item xs={1}>\n            <Typography>:</Typography>\n          </Grid>\n          <Grid item xs={3}>\n            <TextField\n              value={travelTimeMinutes}\n              inputProps={{\n                maxLength: 2,\n                inputMode: \"numeric\",\n              }}\n              onInput={(e) => onlyNumbers(e)}\n              label=\"min\"\n              variant=\"outlined\"\n              size=\"small\"\n              name=\"travelTimeMinutes\"\n              onChange={(e) => {\n                setSubmit(false);\n                setTravelTimeMinutes(e.target.value);\n              }}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <Typography color=\"textPrimary\">Time off</Typography>\n          </Grid>\n          <Grid item xs={3}>\n            <TextField\n              value={timeOffHours}\n              inputProps={{\n                maxLength: 2,\n                inputMode: \"numeric\",\n              }}\n              onInput={(e) => onlyNumbers(e)}\n              label=\"hr\"\n              variant=\"outlined\"\n              size=\"small\"\n              name=\"timeOffHours\"\n              onChange={(e) => {\n                setSubmit(false);\n                setTimeOffHours(e.target.value);\n              }}\n            />\n          </Grid>\n          <Grid item xs={1}>\n            <Typography>:</Typography>\n          </Grid>\n          <Grid item xs={3}>\n            <TextField\n              value={timeOffMinutes}\n              inputProps={{\n                maxLength: 2,\n                inputMode: \"numeric\",\n              }}\n              onInput={(e) => onlyNumbers(e)}\n              label=\"min\"\n              variant=\"outlined\"\n              size=\"small\"\n              name=\"timeOffMinutes\"\n              onChange={(e) => {\n                setSubmit(false);\n                setTimeOffMinutes(e.target.value);\n              }}\n            />\n          </Grid>\n\n          <Grid\n            item\n            xs={12}\n            style={{\n              position: \"fixed\",\n              bottom: \"7%\",\n            }}\n          >\n            {!submit ? (\n              <ColorButton\n                color=\"primary\"\n                size=\"large\"\n                variant=\"contained\"\n                disabled={\n                  !travelTimeHours ||\n                  !travelTimeMinutes ||\n                  !value ||\n                  !timeOffHours ||\n                  !timeOffMinutes ||\n                  (travelTimeHours === \"0\" && travelTimeMinutes === \"0\")\n                    ? true\n                    : false\n                }\n                onClick={() => {\n                  calculateTime(\n                    value[0],\n                    value[1],\n                    travelTimeHours,\n                    travelTimeMinutes,\n                    timeOffHours,\n                    timeOffMinutes\n                  );\n                  setSubmit(true);\n                }}\n              >\n                Calculate\n              </ColorButton>\n            ) : (\n              <Button\n                color=\"secondary\"\n                size=\"large\"\n                variant=\"contained\"\n                onClick={() => resetCalculator()}\n              >\n                Reset\n              </Button>\n            )}\n          </Grid>\n        </Grid>\n        {submit && <Divider className={classes.divider} />}\n        {submit && (\n          <Grid\n            container\n            spacing={2}\n            justify=\"center\"\n            alignItems=\"center\"\n            direction=\"row\"\n          >\n            {labourTime && (\n              <>\n                <Grid item xs={6}>\n                  <Typography color=\"textPrimary\">Labour Time:</Typography>\n                </Grid>\n                <Grid item xs={6}>\n                  <Typography color=\"textSecondary\">{labourTime}</Typography>\n                </Grid>\n              </>\n            )}\n\n            {trav && (\n              <>\n                <Grid item xs={6}>\n                  <Typography color=\"textPrimary\">Travel Time:</Typography>\n                </Grid>\n                <Grid item xs={6}>\n                  <Typography color=\"textSecondary\">{trav}</Typography>\n                </Grid>\n              </>\n            )}\n\n            {offTime && (\n              <>\n                <Grid item xs={6}>\n                  <Typography color=\"textPrimary\">Time off: </Typography>\n                </Grid>\n                <Grid item xs={6}>\n                  <Typography color=\"textSecondary\">{offTime}</Typography>\n                </Grid>\n              </>\n            )}\n            {result && (\n              <>\n                <Grid item xs={3}>\n                  <Typography color=\"textPrimary\">Total:</Typography>\n                </Grid>\n                <Grid item xs={9}>\n                  <Box display=\"flex\">\n                    <Badge\n                      classes={{ anchorOriginTopRightRectangle: classes.badge }}\n                      color=\"default\"\n                      badgeContent={<p>labour</p>}\n                    >\n                      <Typography>{labourTime}</Typography>\n                    </Badge>\n                    <span style={{ margin: \"0px 3px\" }}>+</span>\n                    <Badge\n                      classes={{ anchorOriginTopRightRectangle: classes.badge }}\n                      color=\"default\"\n                      badgeContent={<p>travel</p>}\n                    >\n                      <Typography>{trav}</Typography>\n                    </Badge>\n                    {offTime !== \"00:00\" ? (\n                      <Badge\n                        classes={{\n                          anchorOriginTopRightRectangle: classes.badge,\n                        }}\n                        color=\"default\"\n                        badgeContent={<p>off</p>}\n                      >\n                        <Typography>\n                          <span style={{ margin: \"0px 3px\" }}>-</span>\n                          {offTime}\n                        </Typography>\n                      </Badge>\n                    ) : null}\n\n                    <Typography>\n                      <span style={{ margin: \"0px 3px\" }}>=</span>\n                      {result}\n                    </Typography>\n                  </Box>\n                </Grid>\n              </>\n            )}\n            {result && (\n              <>\n                <Grid item xs={6}>\n                  <Typography style={{ color: green[500] }}>\n                    Time rounded:\n                  </Typography>\n                </Grid>\n                <Grid item xs={6}>\n                  <Typography>{rounded}</Typography>\n                </Grid>\n              </>\n            )}\n          </Grid>\n        )}\n        {submit && <Divider className={classes.divider} />}\n        {submit && (\n          <Grid\n            container\n            spacing={3}\n            justify=\"center\"\n            alignItems=\"center\"\n            className={classes.textCenter}\n          >\n            <Grid item xs={12}>\n              <Typography color=\"textPrimary\">Total Amount</Typography>\n            </Grid>\n            <Grid item xs={2}>\n              <Typography color=\"textPrimary\">\n                {timeStringToFloat(rounded)}\n              </Typography>\n            </Grid>\n            <Grid item xs={1}>\n              <Typography color=\"textSecondary\">X</Typography>\n            </Grid>\n            <Grid item xs={3}>\n              <TextField\n                value={rate}\n                inputProps={{\n                  maxLength: 3,\n                  inputMode: \"numeric\",\n                }}\n                onInput={(e) => onlyNumbers(e)}\n                label=\"rate\"\n                variant=\"outlined\"\n                size=\"small\"\n                name=\"rate\"\n                onChange={(e) => setRate(e.target.value)}\n              />\n            </Grid>\n            <Grid item xs={1}>\n              <Typography color=\"textSecondary\">=</Typography>\n            </Grid>\n            <Grid item xs={4}>\n              <Typography color=\"textPrimary\">\n                {formatPrice(timeStringToFloat(rounded) * rate)}\n              </Typography>\n            </Grid>\n            <Grid item xs={12}>\n              <Divider />\n            </Grid>\n            <Grid item xs={12}>\n              <Typography color=\"textPrimary\">Extra</Typography>\n            </Grid>\n            <Grid item xs={12}>\n              <Typography\n                color=\"textPrimary\"\n                variant=\"h6\"\n                style={{\n                  fontSize: 14,\n                  display: \"flex\",\n                  justifyContent: \"space-between\",\n                  alignItems: \"center\",\n                }}\n              >\n                <Typography>\n                  {formatPrice(timeStringToFloat(rounded) * rate)}\n                </Typography>\n                <Typography>-</Typography>\n                <TextField\n                  className={classes.discountInput}\n                  value={discount}\n                  inputProps={{\n                    maxLength: 2,\n                    inputMode: \"numeric\",\n                  }}\n                  onInput={(e) => onlyNumbers(e)}\n                  variant=\"outlined\"\n                  size=\"small\"\n                  name=\"discount\"\n                  onChange={(e) => setDiscount(e.target.value)}\n                  InputProps={{\n                    endAdornment: (\n                      <InputAdornment position=\"start\">%</InputAdornment>\n                    ),\n                  }}\n                />\n                (\n                <span className={classes.secondary}>\n                  {formatPrice(\n                    timeStringToFloat(rounded) * rate * (discount * 0.01)\n                  )}\n                </span>\n                ) ={\" \"}\n                <span className=\"error\">\n                  {\" \"}\n                  {formatPrice(\n                    timeStringToFloat(rounded) * rate -\n                      timeStringToFloat(rounded) * rate * (discount * 0.01)\n                  )}\n                </span>\n              </Typography>\n            </Grid>\n          </Grid>\n        )}\n      </Paper>\n    </Container>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}